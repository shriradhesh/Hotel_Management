


   
email content
______________

  const bookHotel = async (req, res) => {
    try {
        const hotelId = req.params.hotelId;
        const { checkIn, checkOut, roomType, customerId, number_of_Rooms, promoCode } = req.body;
        let guests = req.body.guests;

        // Check for required fields
        const requiredFields = ['checkIn', 'checkOut', 'roomType', 'customerId', 'number_of_Rooms', 'guests'];

        for (const field of requiredFields) {
            if (!req.body[field]) {
                return res.status(400).json({
                    success: false,
                    message: `Missing ${field.replace('_', ' ')} field`
                });
            }
        }

        // Convert check-in and check-out dates into Date objects
        const checkInDate = new Date(checkIn);
        const checkOutDate = new Date(checkOut);

        // Check if check-in and check-out dates are valid
        const today = new Date();
        today.setDate(today.getDate() - 1);

        if (checkInDate < today || checkOutDate < today || checkOutDate < checkInDate) {
            return res.status(400).json({
                success: false,
                message: `Invalid check-in or check-out dates`
            });
        }
     
       

        // Calculate number of days
        const oneDay = 24 * 60 * 60 * 1000;
        const checkInTime = 12 * 60 * 60 * 1000;
        const checkOutTime = 10 * 60 * 60 * 1000;
        const daysCount = Math.round((checkOutDate.getTime() + checkOutTime - checkInDate.getTime() - checkInTime) / oneDay) || 1;

        // Check for Hotel
        const hotel = await HotelModel.findOne({ Hotel_Id: hotelId });
        if (!hotel) {
            return res.status(400).json({
                success: false,
                message: 'Hotel not found'
            });
        }

        const manager_id = hotel.manager_id;
        // Access room price based on roomType
        let room_fare;
        for (const floor of hotel.floors) {
            for (const room of floor.rooms) {
                if (room.type === roomType) {
                    const baseroom_fare = room.price;
                    room_fare = baseroom_fare * daysCount;
                    break;
                }
            }
            if (room_fare) break;
        }

        // Check for hotel manager
        const hotel_manager = await userModel.findOne({ manager_id });
        if (!hotel_manager) {
            return res.status(400).json({
                success: false,
                message: 'Hotel manager does not exist'
            });
        }

        // Access Hotel manager email
        const hotelManager_Email = hotel_manager.email;

        // Check for customer
        const customer = await customerModel.findById(customerId);
        if (!customer) {
            return res.status(400).json({
                success: false,
                message: 'Customer does not exist'
            });
        }
        const customerName = customer.customerName;
        const customer_email = customer.email;

        // Determine room capacity based on room type
        let roomCapacity;
        for (const floor of hotel.floors) {
            for (const room of floor.rooms) {
                if (room.type === roomType && room.capacity) {
                    roomCapacity = room.capacity;
                    break;
                }
            }
            if (roomCapacity) break;
        }

        if (!roomCapacity) {
            switch (roomType) {
                case 'standard':
                    roomCapacity = 4;
                    break;
                case 'deluxe':
                    roomCapacity = 2;
                    break;
                default:
                    roomCapacity = 1; // Default capacity
                    break;
            }
        }

        const maxChildrenAge = 5;
        let childrenCount = 0;
        let regularGuestsCount = 0;

        guests.forEach(guest => {
            if (guest.age < maxChildrenAge) {
                childrenCount++;
            } else {
                regularGuestsCount++;
            }
        });

        if (childrenCount > 2) {
            return res.status(400).json({
                success: false,
                message: `Only two children under the age of ${maxChildrenAge} are allowed in a ${roomType} room.`
            });
        }

        const totalGuests = regularGuestsCount;

        if (totalGuests > roomCapacity * number_of_Rooms) {
            return res.status(400).json({
                success: false,
                message: `Guests limit exceeded. Maximum allowed guests for ${number_of_Rooms} ${roomType} room(s) is ${roomCapacity * number_of_Rooms}.`
            });
        }

        // Promo code validation
        const applyPromoCode = (room_fare, promoCode, checkInDate) => {
            const promoCodes = {
                'HOTEL20': { discount: 20, dates: ['2024-02-12', '2024-02-13', '2024-02-14', '2024-02-15'] },
                'HOTEL25': { discount: 25, dates: ['2024-12-24', '2024-12-25'] } // Example dates for Christmas
            };

            if (promoCodes[promoCode]) {
                const { discount, dates } = promoCodes[promoCode];
                const checkInStr = checkInDate.toISOString().split('T')[0];
                if (dates.includes(checkInStr)) {
                    return room_fare * (1 - discount / 100);
                }
            }
            return room_fare;
        };

        if (promoCode) {
            room_fare = applyPromoCode(room_fare, promoCode, checkInDate);
        }

        // Generate separate booking IDs for each room
        const bookingIds = [];
        for (let i = 0; i < number_of_Rooms; i++) {
            const randomNumber = generateRandomNumber(6);
            const booking_Id = `BKID${randomNumber}`;
            bookingIds.push(booking_Id);

            // Create booking object for each room
            const booking = {
                Hotel_Id: hotelId,
                Hotel_name: hotel.Hotel_name,
                customer_email: customer_email,
                Booking_Id: booking_Id,
                roomType: roomType,
                customerId: customerId,
                status: "pending",
                checkIn: checkInDate,
                checkOut: checkOutDate,
                room_fare: room_fare,
                bookedRoom: [],
                guests: guests.slice(i * roomCapacity, (i + 1) * roomCapacity) // Slice guests for each room
            };

            // Save booking details in bookedRoomModel
            await bookedRoomModel.create(booking);

            // Send email to the hotel manager for each room
            const emailContent = ` <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Booking Confirmation</title>
                </head>
                <body style="font-family: Arial, sans-serif; background-color: #f2f2f2; padding: 20px;">

                    <div style="background-color: #fff; border-radius: 10px; padding: 20px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                        <h2 style="color: #333; text-align: center; margin-bottom: 20px;">Booking Confirmation</h2>
                        <p>A new booking request has arisen from<strong> ${customerName}  </strong> for <strong> ${hotel.Hotel_name}</strong> , <strong> ${i+1}</strong> Room</p>
                    </div>

                </body>
                </html>`;

            const emailContent1 = `<!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Booking Confirmation</title>
                </head>
                <body style="font-family: Arial, sans-serif; background-color: #f2f2f2; padding: 20px;">

                    <div style="background-color: #fff; border-radius: 10px; padding: 20px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                        <h2 style="color: #333; text-align: center; margin-bottom: 20px;">Booking Confirmation</h2>
                        <p>Your Hotel Booking Request has been<strong> received. </strong>  A confirmation will be sent to you shortly</p>
                        <p>If you have any questions, feel free to contact us.</p>
                    </div>

                </body>
                </html>`;

            sendBookingEmail(hotelManager_Email, `Hotel Booking ..!`, emailContent);
            sendBookingEmail(customer_email, `Hotel Booking ..!`, emailContent1);
        }

        // Return success response with all booking IDs
        return res


__________________________




// Add rooms logic  to the specified floor
hotel.floors[floorIndex].rooms.push(...rooms);

// Adjust room prices based on floor number
const floorNumber = parseInt(floor_Number);
const priceIncreasePercentage = getPercentageIncrease(floorNumber);
if (priceIncreasePercentage > 0) {
    for (const room of hotel.floors[floorIndex].rooms) {
        room.price *= (1 + priceIncreasePercentage / 100);
    }
}

// Update the hotel document with the modified floors
await hotel.save();

return res.status(200).json({
    success: true,
    message: 'Rooms added successfully to floor ' + floor_Number
});

// Function to calculate percentage increase based on floor number
function getPercentageIncrease(floorNumber) {
    if (floorNumber >= 4 && floorNumber < 6) {
        return 10;
    } else if (floorNumber >= 6 && floorNumber < 9) {
        return 20;
    } else if (floorNumber >= 9 && floorNumber < 13) {
        return 30;
    } else if (floorNumber >= 13 && floorNumber <= 15) {
        return 35;
    } else if (floorNumber > 15) {
        return 40;
    } else {
        return 0; // No increase for floors below 4
    }
}


*************************************


Search Hotel
_____________  


   const search_Hotel = async (req, res) => {
            try {
                const { city, checkIn, checkOut, number_of_Rooms } = req.body;
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Resetting hours, minutes, seconds, and milliseconds
                
                // Check for required fields
                const requiredFields = ['city', 'checkIn', 'checkOut', 'number_of_Rooms'];
                for (const field of requiredFields) {
                    if (!req.body[field]) {
                        return res.status(400).json({
                            success: false,
                            message: `Missing ${field.replace('_', ' ')} field`
                        });
                    }
                }
                
                // Convert checkIn and checkOut dates into Date objects
                const checkInDate = new Date(checkIn);
                const checkOutDate = new Date(checkOut);
                
                // Check for valid check-in date
                if (checkInDate < today) {
                    return res.status(400).json({
                        success: false,
                        message: `You can't select a previous date for check-in`
                    });
                }
        
                // Check if check-out date is after check-in date
                if (checkOutDate <= checkInDate) {
                    return res.status(400).json({
                        success: false,
                        message: `Check-out date must be after check-in date`
                    });
                }
        
                // Get hotels based on city
                const hotels = await HotelModel.find({ city });
        
                // Loop through each hotel to calculate availability
                for (let hotel of hotels) {
                    let totalRooms = 0;
                    let availableRoomTypeCounts = {};
                    let bookedRoomTypeCounts = {};

                    const bookedRooms = await bookedRoomModel.find({
                        Hotel_Id: hotel.Hotel_Id,
                        checkIn: { $lte: new Date(checkOutDate.getTime() + 24 * 60 * 60 * 1000) },
                        checkOut: { $gte: checkInDate }
                    });
                      
                    // Calculate total number of rooms in the hotel
                    hotel.floors.forEach(floor => {
                        totalRooms += floor.rooms.length;
                    });
                    
                    // Loop through each available room to count room types
            for (let floor of hotel.floors) {
                for (let room of floor.rooms) {
                    const roomType = room.type;
                    if (!availableRoomTypeCounts[roomType]) {
                        availableRoomTypeCounts[roomType] = 0;
                    }
                    availableRoomTypeCounts[roomType]++;
                }
            }        
        
        // Count the total number of booked rooms and their types
for (const booking of bookedRooms) {
    for (const bookedRoom of booking.bookedRoom) {
        for (const room of bookedRoom.rooms) {                
            const roomType = room.roomType;               

            if (roomType !== undefined && roomType !== null) {
                // Check if roomType is defined before using it
                if (!bookedRoomTypeCounts[roomType]) {
                    bookedRoomTypeCounts[roomType] = 0;
                }
                bookedRoomTypeCounts[roomType]++;
            }
        }
    }
}

// Check availableRoomTypeCounts to ensure all room types are accounted for in bookedRoomTypeCounts
for (const roomType in availableRoomTypeCounts) {
    if (!bookedRoomTypeCounts.hasOwnProperty(roomType)) {
        // If room type is missing, add it with a count of 0
        bookedRoomTypeCounts[roomType] = 0;
    }
}

        
            hotel.totalRooms = totalRooms;
            hotel.availableRooms = totalRooms - bookedRooms.length; // Assuming each booking reserves one room
            hotel.bookedRoomsCount = bookedRooms.length;
            hotel.enoughRoomsAvailable = hotel.availableRooms >= number_of_Rooms;
            hotel.availableRoomTypeCounts = availableRoomTypeCounts;
            hotel.bookedRoomTypeCounts = bookedRoomTypeCounts;

            // Remove unnecessary fields
            delete hotel.__v;
            delete hotel.createdAt;
            delete hotel.updatedAt;
        }

        return res.status(200).json({
            success: true,
            message: "Search result",
            hotels: hotels.map(hotel => ({
                _id: hotel._id,
                Hotel_Id: hotel.Hotel_Id,
                Hotel_name: hotel.Hotel_name,
                address: hotel.address,
                city: hotel.city,
                manager_id: hotel.manager_id,
                HotelImages: hotel.HotelImages,
                hotelType: hotel.hotelType,
                facilities: hotel.facilities,
                aboutHotel: hotel.aboutHotel,
                totalRooms: hotel.totalRooms,
                bookedRoomsCount: hotel.bookedRoomsCount,
                availableRooms: hotel.availableRooms,
                enoughRoomsAvailable: hotel.enoughRoomsAvailable,
                availableRoomTypeCounts: Object.keys(hotel.availableRoomTypeCounts).reduce((acc, key) => {
                    acc[key] = hotel.availableRoomTypeCounts[key] - (hotel.bookedRoomTypeCounts[key] || 0);
                    return acc;
                }, {}),
                bookedRoomTypeCounts: hotel.bookedRoomTypeCounts
            }))
        });
               
            } catch (error) {
                console.error(error);
                res.status(500).json({
                    success: false,
                    message: "Server error"
                });
            }
        };



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++__________________++++++++++++++++++++++++++++++++++++++++++++++
  
BN
const bookHotel = async (req, res) => {
        try {
            const hotelId = req.params.hotelId;
            const { checkIn, checkOut, roomType, customerId } = req.body;
            let guests = req.body.guests;
    
            // Check for required fields
            const requiredFields = ['checkIn', 'checkOut', 'roomType', 'customerId', 'guests'];
    
            for (const field of requiredFields) {
                if (!req.body[field]) {
                    return res.status(400).json({
                        success: false,
                        message: `Missing ${field.replace('_', ' ')} field`
                    });
                }
            }
    
            // Convert check-in and check-out dates into Date objects
            const checkInDate = new Date(checkIn);
            const checkOutDate = new Date(checkOut);
    
            // Check if check-in and check-out dates are valid
            const today = new Date();
            today.setDate(today.getDate() - 1);
    
            if (checkInDate < today || checkOutDate < today || checkOutDate < checkInDate) {
                return res.status(400).json({
                    success: false,
                    message: `Invalid check-in or check-out dates`
                });
            }
    
            // Check for Hotel
            const hotel = await HotelModel.findOne({ Hotel_Id: hotelId });
            if (!hotel) {
                return res.status(400).json({
                    success: false,
                    message: 'Hotel not found'
                });
            }
    
            const Hotel_name = hotel.Hotel_name;
    
            // Find booked rooms for the specified check-in date
            const bookedRooms = await bookedRoomModel.find({
                Hotel_Id: hotelId,
                checkIn: checkInDate
            });
            
            // If rooms are booked on the specified check-in date, exclude them
            let excludedRooms = [];
            if (bookedRooms.length > 0) {
                bookedRooms.forEach(room => {
                    if (room.bookedRoom && room.bookedRoom.rooms) {
                        excludedRooms = excludedRooms.concat(room.bookedRoom.rooms.map(room => room.roomNumber));
                    }
                });
            }
            // Find available rooms with matching roomType and not booked for the specified check-in date
            const availableRooms = await HotelModel.find({
                Hotel_Id: hotelId,
                'floors.rooms.type': roomType,
                'floors.rooms.roomNumber': { $nin: excludedRooms }
            });
    
            // If suitable rooms are not available, suggest the customer to book rooms with another roomType
            if (availableRooms.length === 0) {
                // Find other available room types for the specified check-in date
                const availableRoomTypes = await HotelModel.distinct('floors.rooms.type', {
                    Hotel_Id: hotelId,
                    'floors.rooms.type': { $ne: roomType }
                });
    
                return res.status(400).json({
                    success: false,
                    message: `Rooms with ${roomType} are not available for the specified check-in date. Available room types: ${availableRoomTypes.join(', ')}.`
                });
            }
    
            // Proceed with booking the hotel rooms
            const bookedRoom = [];
    
            let remainingGuests = guests.length;
    
            for (const hotel of availableRooms) {
                const floor = hotel.floors.find(floor => floor.rooms.some(room => room.type === roomType));
                if (!floor) continue; // If the required room type is not available on any floor, skip this hotel
    
                const room = floor.rooms.find(room => room.type === roomType);
                const guestsToAssign = Math.min(remainingGuests, room.capacity);
    
                // Update room availability
                room.capacity -= guestsToAssign;
    
                // Assign guests to the room
                const guestObjects = guests.slice(0, guestsToAssign);
                guests = guests.slice(guestsToAssign);
                // Generate booking_Id
                const randomNumber = generateRandomNumber(6);
                const booking_Id = `BKID${randomNumber}`;
                bookedRoom.push({
                    Hotel_Id: hotelId,
                    Hotel_name: Hotel_name,
                    Booking_Id: booking_Id,
                    customerId: customerId,
                    status: "confirmed",
                    checkIn: checkInDate,
                    checkOut: checkOutDate,
                    bookedRoom: [{
                        floorNumber: floor.floor_Number,
                        rooms: [{
                            roomNumber: room.room_number,
                            available: room.capacity === 0,
                            price: room.price,
                            roomType: room.type
                        }]
                    }],
                    guests: guestObjects
                });
    
                remainingGuests -= guestsToAssign;
                if (remainingGuests <= 0) break;
            }
    
            // Save booking details in bookedRoomModel
            await bookedRoomModel.insertMany(bookedRoom);
    
            // Return success response
            return res.status(200).json({
                success: true,
                message: "Hotel Booked successfully",
    
            });
    
        } catch (error) {
            console.error(error);
            res.status(500).json({
                success: false,
                message: "server error",
                error_message: error.message
            });
        }
    };
    
    
    // Function to generate a random number
    function generateRandomNumber(length) {
        let result = '';
        const characters = '0123456789';
        const charactersLength = characters.length;
    
        for (let i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
    
        return result;
    }
    


----------------------------------------------------------------------------------------------------------------


const updateRoom = async (req, res) => {
    try {
        const { Hotel_Id, room_number } = req.params;
        const { description, price } = req.body;

        // Check for Hotel_Id
        if (!Hotel_Id) {
            return res.status(400).json({
                success: false,
                message: 'Hotel_Id required'
            });
        }

        // Check for room_number
        if (!room_number) {
            return res.status(400).json({
                success: false,
                message: 'room_number required'
            });
        }

        // Check for description or price
        if (!description && !price) {
            return res.status(400).json({
                success: false,
                message: 'At least one of description or price required'
            });
        }

        // Check for Hotel
        let hotel = await HotelModel.findOne({ Hotel_Id });
        if (!hotel) {
            return res.status(400).json({
                success: false,
                message: 'Hotel not found'
            });
        }

        // Find the room based on room_number
        let foundRoom = null;
        let foundFloor = null;
        for (const floor of hotel.floors) {
            const roomIndex = floor.rooms.findIndex(room => room.room_number === room_number);
            if (roomIndex !== -1) {
                foundRoom = hotel.floors[floorIndex].rooms[roomIndex];
                foundFloor = floor;
                break;
            }
        }

        // If room doesn't exist, return error
        if (!foundRoom) {
            return res.status(400).json({
                success: false,
                message: `Room ${room_number} not found in hotel ${Hotel_Id}`
            });
        }

        // Update description and price if provided
        if (description) {
            foundRoom.description = description;
        }

        if (price) {
            foundRoom.price = price;
        }

        // Update the hotel document with the modified room details
        await hotel.save();

        return res.status(200).json({
            success: true,
            message: `Description and/or price updated for room ${room_number} in hotel ${Hotel_Id}`,
            updatedRoom: foundRoom
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: 'Server error',
            error_message: error.message
        });
    }
};



__________________________________________________________________

room to metro --> 20 (auto)
nzm to mtj ----> 170 ( railway tickit)
frooty -------> 40 rs
1 cigret  -----> 10 
mtj to govardhana ----> 100 ( texi)
room ---------> 100
puja samagri(dudh, prasad , phool) ---> 40 
chai + biscuit -----> 35 
govardhana to barsana -----> 100 ( auto)
barsana to vrindvana ---> 140 (auto)
vrindavana to bihari ji temple ---> 40
shoes stand ---> 10 rs
samsosa + lassi ----> 80 rs
vrindava to mtj -----> 100 rs
mtj to nzm ----> 165 rs
metro to room ----> 20 rs
water bottle ---> 7 * 20 = 140 rs 


____________________________________________________________________________

                                            /* Bookings Exports */
    // Api to export Bookings
            const export_Bookings = async (req, res) => {
                try {
                // Fetch all booking data from the booking Database
                const bookings = await bookedRoomModel.find({});
            
                // Create Excel workbook and worksheet
                const workbook = new ExcelJs.Workbook();
                const worksheet = workbook.addWorksheet("Bookings");
            
                // Define the Excel Header
                worksheet.columns = [
                    {
                    header: "Hotel_Id",
                    key: "Hotel_Id",
                    },
                    
                    {
                    header: "Booking Id",
                    key: "Booking_Id",
                    },
                    {
                    header: "Customer ID",
                    key: "customerId",
                    },
                    {
                        header : "room Type",
                        key : "roomType"
                    },
                    {
                    header: "CheckIn Date",
                    key: "checkIn",
                    },
                    {
                    header: "CheckOut Date",
                    key: "checkOut",
                    },
                    
                    {
                    header: "Status",
                    key: "status",
                    },

                    {
                    header: "Payment Status",
                    key: "paymentStatus",
                    },
                    {
                    header: "Total Fare",
                    key: "room_fare",
                    },
                ];
            
                // Add Booking data to the worksheet
                bookings.forEach((booking) => {
                    worksheet.addRow({
					Hotel_Id : booking.Hotel_Id,
                    Booking_Id: booking.Booking_Id,
                    customerId: booking.customerId,
                    roomType: booking.roomType,
                    checkIn: booking.checkIn,
					checkOut : booking.checkOut,
                    status: booking.status,
                    paymentStatus: booking.paymentStatus,					
                    room_fare: booking.room_fare,
                    });
                });
            
                // Set response headers for downloading the Excel file
                res.setHeader(
                    "Content-Type",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                );
            
                res.setHeader("Content-Disposition", "attachment; filename=bookings.xlsx");
            
                // Generate and send the Excel File as a response
                await workbook.xlsx.write(res);
            
                // End the response
                res.end();
                } catch (error) {
                console.error(error);
                res.status(500).json({ success : false ,
                                       message : "server error",
                                        error_message : error.message			
										});
                }
            };



------------------------------------------------------


Constantine
Barika
Aïn Beïda
Bou Saada
Aflou
Algiers [El Djazaïr]
Djelfa
Bordj Bou Arreridj
Aïn Oussera
ChlefBéchar
El Eulma
Béjaïa
Blida
Biskra
Annaba
Tizi Ouzou 
Tlemcen
Oran
Jijel
Maghnia
El Oued
Messaad
Laghouat
Khenchela
Skikda
Setif
Batna
Tebessa
Tiaret
Relizane
Médéa
Mostaganem
Guelma
Sidi Bel Abbès
Ouargla
Souk Ahras 
Saïda
M'Sila
Mascara
Boumerdes
Bir El Djir
Ghardaia
Sig
Sidi Aissa
Béni Saf
Ksar Boukhari
Meftah
Chabet el Ameur
Tizi Ghenif
Beni Amrane



----------------------------------------------------------


npx create-react-app hotel-search
cd hotel-search
npm install @react-google-maps/api

----------------
Map component
----------------

import React, { useEffect, useState, useCallback } from 'react';
import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';

const mapContainerStyle = {
  width: '100vw',
  height: '100vh'
};

const options = {
  zoom: 8
};

const MapComponent = ({ hotels, currentLocation }) => {
  return (
    <LoadScript googleMapsApiKey="YOUR_GOOGLE_MAPS_API_KEY">
      <GoogleMap mapContainerStyle={mapContainerStyle} center={currentLocation} zoom={options.zoom}>
        {currentLocation && (
          <Marker position={{ lat: currentLocation.lat, lng: currentLocation.lng }} label="You" />
        )}
        {hotels.map((hotel, index) => (
          <Marker key={index} position={{ lat: hotel.lat, lng: hotel.lng }} label={hotel.name} />
        ))}
      </GoogleMap>
    </LoadScript>
  );
};

export default MapComponent;




---------
App.js
---------
import React, { useState, useEffect, useCallback } from 'react';
import MapComponent from './MapComponent';

const App = () => {
  const [city, setCity] = useState('Agra');
  const [checkIn, setCheckIn] = useState('2024-05-26');
  const [checkOut, setCheckOut] = useState('2024-05-27');
  const [hotels, setHotels] = useState([]);
  const [currentLocation, setCurrentLocation] = useState(null);

  const fetchHotels = useCallback(async () => {
    const response = await fetch('http://13.51.205.211:2501/api/search_Hotel', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ city, checkIn, checkOut }),
    });

    const data = await response.json();
    return data.hotels; // Adjust based on your API response structure
  }, [city, checkIn, checkOut]);

  const calculateDistance = (lat1, lng1, lat2, lng2) => {
    const toRad = (x) => (x * Math.PI) / 180;

    const R = 6371; // Radius of the Earth in km
    const dLat = toRad(lat2 - lat1);
    const dLng = toRad(lng2 - lng1);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };

  useEffect(() => {
    const getLocationAndHotels = async () => {
      // Get current location
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const userLocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            setCurrentLocation(userLocation);

            // Fetch hotels
            const fetchedHotels = await fetchHotels();
            const nearbyHotels = fetchedHotels.filter((hotel) => {
              const distance = calculateDistance(userLocation.lat, userLocation.lng, hotel.lat, hotel.lng);
              return distance <= 15; // within 15 km
            });
            setHotels(nearbyHotels);
          },
          (error) => {
            console.error('Error getting current location: ', error);
          }
        );
      } else {
        console.error('Geolocation is not supported by this browser.');
      }
    };

    getLocationAndHotels();
  }, [fetchHotels]);

  return (
    <div>
      <h1>Hotel Search</h1>
      <form onSubmit={(e) => e.preventDefault()}>
        <label>
          City:
          <input type="text" value={city} onChange={(e) => setCity(e.target.value)} />
        </label>
        <label>
          Check-In:
          <input type="date" value={checkIn} onChange={(e) => setCheckIn(e.target.value)} />
        </label>
        <label>
          Check-Out:
          <input type="date" value={checkOut} onChange={(e) => setCheckOut(e.target.value)} />
        </label>
        <button type="button" onClick={() => fetchHotels()}>
          Search Hotels
        </button>
      </form>
      {currentLocation && <MapComponent hotels={hotels} currentLocation={currentLocation} />}
    </div>
  );
};

export default App;




-----------------------------------------------------

paypal integration ---

-----------------

Step-by-Step Guide to Integrate PayPal in Node.js
Step 1: Set Up PayPal Developer Account and App
Create a PayPal Developer Account:

Go to the PayPal Developer site and sign up or log in.
Create a REST API App:

Navigate to the Dashboard.
Click on "My Apps & Credentials."
Click "Create App."
Give your app a name and choose the sandbox or live environment.
Click "Create App."
Get API Credentials:

After creating the app, you will get a Client ID and Secret. These are needed to authenticate your API requests.
Step 2: Initialize a Node.js Project
Create a new directory and navigate into it:

bash
Copy code
mkdir paypal-integration
cd paypal-integration
Initialize a new Node.js project:

bash
Copy code
npm init -y
Install required packages:

bash
Copy code
npm install express @paypal/checkout-server-sdk
Step 3: Set Up Your Node.js Server
Create the server file:
Create a file named server.js and add the following code:

javascript
Copy code
const express = require('express');
const app = express();
const port = 3000;

app.use(express.json());

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}/`);
});
Run the server:

bash
Copy code
node server.js
You should see Server running at http://localhost:3000/ in your terminal.

Step 4: Configure PayPal SDK
Create a PayPal configuration file:
Create a file named paypal.js and add the following code:

javascript
Copy code
const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');

function environment() {
    let clientId = "YOUR_CLIENT_ID";
    let clientSecret = "YOUR_CLIENT_SECRET";

    return new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret);
    // For live environment, use:
    // return new checkoutNodeJssdk.core.LiveEnvironment(clientId, clientSecret);
}

function client() {
    return new checkoutNodeJssdk.core.PayPalHttpClient(environment());
}

module.exports = { client };
Replace YOUR_CLIENT_ID and YOUR_CLIENT_SECRET with your actual PayPal credentials.

Step 5: Create Payment Routes
Add routes to handle PayPal payment creation and capture:
Update server.js with the following code:

javascript
Copy code
const express = require('express');
const app = express();
const port = 3000;
const paypal = require('./paypal');
const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');

app.use(express.json());

app.post('/create-order', async (req, res) => {
    let request = new checkoutNodeJssdk.orders.OrdersCreateRequest();
    request.prefer("return=representation");
    request.requestBody({
        intent: 'CAPTURE',
        purchase_units: [{
            amount: {
                currency_code: 'USD',
                value: '100.00' // Replace with the actual amount
            }
        }]
    });

    try {
        const order = await paypal.client().execute(request);
        res.json({ id: order.result.id });
    } catch (err) {
        console.error(err);
        res.status(500).send('Something went wrong');
    }
});

app.post('/capture-order', async (req, res) => {
    const { orderId } = req.body;

    let request = new checkoutNodeJssdk.orders.OrdersCaptureRequest(orderId);
    request.requestBody({});

    try {
        const capture = await paypal.client().execute(request);
        res.json(capture.result);
    } catch (err) {
        console.error(err);
        res.status(500).send('Something went wrong');
    }
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}/`);
});
Step 6: Test the Integration
Use Postman or any API testing tool to create and capture an order.

Create Order:

Send a POST request to http://localhost:3000/create-order.
You should get an order ID in response.
Capture Order:

Send a POST request to http://localhost:3000/capture-order with the order ID in the request body as JSON.
Example body: { "orderId": "ORDER_ID_FROM_CREATE_ORDER_RESPONSE" }
Step 7: Integrate Front-End for Complete Checkout Experience
Create an HTML file:
Create a file named index.html with the following code:

html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>PayPal Integration</title>
    <script src="https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID"></script>
</head>
<body>
    <div id="paypal-button-container"></div>
    <script>
        paypal.Buttons({
            createOrder: function(data, actions) {
                return fetch('/create-order', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                }).then(function(res) {
                    return res.json();
                }).then(function(orderData) {
                    return orderData.id;
                });
            },
            onApprove: function(data, actions) {
                return fetch('/capture-order', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        orderId: data.orderID
                    })
                }).then(function(res) {
                    return res.json();
                }).then(function(orderData) {
                    console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
                    alert('Transaction completed');
                });
            }
        }).render('#paypal-button-container');
    </script>
</body>
</html>
Replace YOUR_CLIENT_ID with your actual PayPal client ID.

Serve the HTML file using Express:
Update server.js to serve the index.html file:

javascript
Copy code
const express = require('express');
const path = require('path');
const app = express();
const port = 3000;
const paypal = require('./paypal');
const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');

app.use(express.json());

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.post('/create-order', async (req, res) => {
    let request = new checkoutNodeJssdk.orders.OrdersCreateRequest();
    request.prefer("return=representation");
    request.requestBody({
        intent: 'CAPTURE',
        purchase_units: [{
            amount: {
                currency_code: 'USD',
                value: '100.00' // Replace with the actual amount
            }
        }]
    });

    try {
        const order = await paypal.client().execute(request);
        res.json({ id: order.result.id });
    } catch (err) {
        console.error(err);
        res.status(500).send('Something went wrong');
    }
});

app.post('/capture-order', async (req, res) => {
    const { orderId } = req.body;

    let request = new checkoutNodeJssdk.orders.OrdersCaptureRequest(orderId);
    request.requestBody({});

    try {
        const capture = await paypal.client().execute(request);
        res.json(capture.result);
    } catch (err) {
        console.error(err);
        res.status(500).send('Something went wrong');
    }
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}/`);
});




Run the server and open the browser:

Start the server: node server.js.
Open your browser and navigate to http://localhost:3000.
You should now see the PayPal button and be able to complete a transaction.

Summary
Set Up PayPal Developer Account: Obtain Client ID and Secret.
Initialize Node.js Project: Install necessary packages.
Set Up Server: Create Express server and configure PayPal SDK.
Create Payment Routes: Implement endpoints to create and capture orders.
Test API: Use tools like Postman to test endpoints.
Integrate Front-End: Create an HTML file to handle client-side PayPal transactions.
This guide covers the complete process of integrating PayPal into a Node.js backend, from setting up credentials to handling transactions and integrating with a front-end interface.


